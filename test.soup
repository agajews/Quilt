(run (set! pexp (cons
    ((fun (var m)
        (fun (s c)
            (if (starts-with s m)
                (do
                    (log-parser "'parse-str" s)
                    (apply c var (drop (length m) s)))
                (list))))
        (gen-var "parse-str") "parse-str")
    pexp)))

(run (def! (list) parse-str (fun (m s c)
    (if (starts-with s m)
        (apply c m (drop (length m) s))
        (list)))))

(run (set! pexp (cons
    ((fun (var) (fun (s c)
        (parse-str "define-var" s (fun (_ s1) (do
            (log-parser "'define-var" s1)
            (apply c var s1))))))
        (gen-var "define-var"))
    pexp)))

(run (def! (list) define-var (fun (name val) ((fun (var) (do
        (set! pexp (cons
            (fun (s c)
                (parse-str name s (fun (_ s1) (do
                        (log-parser (cat "'" name) s1)
                        (apply c var s1)))))
            pexp))
        (apply def! (list) var val)))
        (gen-var name)))))

(run (define-var "prepend!" (lambda (@1 l x) ((fun (l' x')
        (apply set! l (cons x' l')))
    (eval @1 l)
    (eval @1 x)))))

(run (define-var "parse-while" (fun (pred s c) ((fun (l)
    (if (empty-str (head l))
        (list)
        (apply c (head l) (head (tail l)))))
    (span pred s)))))

(run (define-var "parse-ws" (fun (s c)
    (parse-while
        (fun (x) (elem (list " " "\n" "\t") x))
        s
        (fun (v s1) (apply c v s1))))))

(run (define-var "parse-ident" (fun (s c)
    (parse-while
        (fun (x) (or
            (is-alpha-num x)
            (elem (str->list "~!@#$%^&*-=+_|'<>?") x)))
        s
        (fun (name s1)
            (if (all (map is-digit (str->list name)))
                (list)
                (c name s1)))))))

(run (prepend! pexp (fun (s c)
    (parse-str "(define" s (fun (_ s1) (do
    (log-parser "(define" s1)
    (parse-ws s1 (fun (_ s2) (do
    (parse-ident s2 (fun (name s3)
    ((fun (var)
        (do
            (prepend! pexp (fun (s' c') (do
                (parse-str name s' (fun (_ s'1) (do
                (log-parser (cat "'" name) s'1)
                (apply c' var s'1)))))))
            (log-parser name s3)
            (parse-ws s3 (fun (_ s4)
            (parse s4 (pexp (lambda (@1 val s5)
            (parse-str ")" (eval @1 s5) (fun (_ s6) (do
                (log-parser ")" s6)
                (apply c (. set! var val) s6)))))))))))
        (gen-var name)))))))))))))

(define x (+ 3 4))
(print x)
(define y (+ x 2))
(print y)

(define factorial (fun (n) (if (< n 1)
    1
    (* n (factorial (- n 1))))))

(print (factorial x))
(print (factorial y))
