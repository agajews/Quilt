(run (set! pexp (cons
    (apply (lambda (@1 var m)
        (lambda (@2 s c) (apply (lambda (@3 s1 c1)
            (if (starts-with s1 m)
                (do
                    (log-parser "'parse-str" s1)
                    (apply c1 var (drop (length m) s1)))
                (list)))
            (eval @2 s) (eval @2 c))))
        (gen-var "parse-str") "parse-str")
    pexp)))

(run (set! parse-str (lambda (@1 m s c) (apply (lambda (@2 m1 s1 c1)
    (if (starts-with s1 m1)
        (apply c1 m1 (drop (length m1) s1))
        (list)))
    (eval @1 m) (eval @1 s) (eval @1 c)))))

(run (set! pexp (cons
    (apply
        (lambda (@1 var) (lambda (@2 s c)
            (parse-str "define-var" (eval @2 s) (lambda (@3 _ s1) (apply (lambda (@4 c2 s2) (do
                (log-parser "'define-var" s2)
                (apply c2 var s2))) (eval @2 c) (eval @3 s1))))))
        (gen-var "define-var"))
    pexp)))

(run (set! define-var (lambda (@1 name val) (apply (lambda (@2 name1) (apply (lambda (@3 var) (do
    (set! pexp (cons
        (lambda (@4 s c)
            (parse-str (eval @2 name1) (eval @4 s) (lambda (@5 _ s1) (apply (lambda (@6 c2 s2) (do
                (log-parser (cat "'" name1) s2)
                (apply c2 var s2))) (eval @4 c) (eval @5 s1)))))
        pexp))
    (apply def! var val 3))) (gen-var name1))) name))))

(run (define-var "prepend!" (lambda (@1 l x)
    (apply set! l (cons x (eval @1 l))))))

