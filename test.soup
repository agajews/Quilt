(run (set! pexp (cons
    (apply (lambda (@1 var m)
        (lambda (@2 s c) (apply (lambda (@3 s1 c1)
            (if (starts-with s1 m)
                (do
                    (log-parser "'parse-str" s1)
                    (apply c1 var (drop (length m) s1)))
                (list)))
            (eval @2 s) (eval @2 c))))
        (gen-var "parse-str") "parse-str")
    pexp)))

(run (apply def! (list) (quote parse-str)
    (lambda (@1 m s c) (apply (lambda (@2 m1 s1 c1)
        (if (starts-with s1 m1)
            (apply c1 m1 (drop (length m1) s1))
            (list)))
        (eval @1 m) (eval @1 s) (eval @1 c)))))

(run (set! pexp (cons
    (apply
        (lambda (@1 var) (lambda (@2 s c)
            (parse-str "define-var" (eval @2 s) (lambda (@3 _ s1) (apply (lambda (@4 c2 s2) (do
                (log-parser "'define-var" s2)
                (apply c2 var s2))) (eval @3 c) (eval @3 s1))))))
        (gen-var "define-var"))
    pexp)))

(run (apply def! (list) (quote define-var)
    (lambda (@1 name val) (apply (lambda (@2 name1) (apply (lambda (@3 var) (do
        (set! pexp (cons
            (lambda (@4 s c)
                (parse-str (eval @2 name1) (eval @4 s) (lambda (@5 _ s1) (apply
                    (lambda (@6 c2 s2) (do
                        (log-parser (cat "'" name1) s2)
                        (apply c2 var s2)))
                    (eval @5 c)
                    (eval @5 s1)))))
            pexp))
        (apply def! (list) var val))) (gen-var name1))) (eval @1 name)))))

(run (define-var "prepend!" (lambda (@1 l x)
    (apply set! l (cons x (eval @1 l))))))

(run (define-var "parse-while" (lambda (@1 pred s c) (apply (lambda (@2 l)
    (if (empty-str (head l))
        (list)
        (apply (eval @2 c) (head l) (head (tail l)))))
    (span (eval @1 pred) (eval @1 s))))))

(run (define-var "parse-ws" (lambda (@1 s c)
    (parse-while
        (lambda (@2 x) (elem (list " " "\n" "\t") x))
        (eval @1 s)
        (eval @1 c)))))

(run (define-var "parse-ident" (lambda (@1 s c)
    (parse-while
        (lambda (@2 x) (or (is-alpha-num x) (elem (str->list "~!@#$%^&*-=+_|'<>?") x)))
        (eval @1 s)
        (lambda (@2 name s1) (apply (lambda (@3 c2 name2 s2)
            (if (and is-digit (str->list name))
                (list)
                (c2 name2 s2)))
            c name s1))))))

(run (prepend! pexp (lambda (@1 s c)
    (parse-str "(define" (eval @1 s) (lambda (@2 _ s1)
    (parse-ws (eval @2 s1) (lambda (@3 _ s2)
    (parse-ident (eval @3 s2) (lambda (@4 name s3)
    (parse-ws (eval @4 s3) (lambda (@5 _ s4)
    (parse (eval @5 s4) (pexp (lambda (@6 val s5)
    (parse-str ")" (eval @6 s5) (lambda (@7 _ s6) (apply
        (lambda (@8 var val1) (do
            (prepend! pexp (lambda (@9 s' c')
                (parse-str name (eval @9 s') (lambda (@10 _ s'1)
                (apply (eval @10 c') var (eval @10 s'1))))))
            (apply (eval @8 c) (quote (apply set! var val)) (eval @8 s6))))
        (gen-var name)
        (eval @7 val))))))))))))))))))

