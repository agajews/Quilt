[(Lambda [Ident 3,Ident 4,Ident 5] (
    FuncCall PrimFunc [(FuncCall PrimFunc [Ident 3,Ident 3]),(FuncCall Ident 3 [(FuncCall PrimFunc []),(FuncCall PrimFunc [(FuncCall PrimFunc [Ident 3]),Ident 3])]),(FuncCall PrimFunc [])]))]

[(Lambda [Ident 3,Ident 4,Ident 5] (
    FuncCall PrimFunc [(FuncCall PrimFunc [Ident 3,Ident 3]),(FuncCall Ident 3 [(FuncCall PrimFunc []),(FuncCall PrimFunc [(FuncCall PrimFunc [Ident 3]),Ident 4])]),(FuncCall PrimFunc [])]))]

((Lambda [Ident 3,Ident 4,Ident 5] (
    FuncCall PrimFunc [(FuncCall PrimFunc [Ident 3,Ident 3]),(FuncCall Ident 3 [(FuncCall PrimFunc []),(FuncCall PrimFunc [(FuncCall PrimFunc [Ident 3]),Ident 5])]),(FuncCall PrimFunc [])])))


(Lambda [Ident 3,Ident 4,Ident 5] (FuncCall PrimFunc [(FuncCall PrimFunc [Ident 3,Ident 3])]))

(Lambda [Ident 3,Ident 4,Ident 5] (FuncCall PrimFunc [(FuncCall PrimFunc [Ident 3,Ident 4])]))

(Lambda [Ident 3,Ident 4,Ident 5] (FuncCall PrimFunc [(FuncCall PrimFunc [Ident 3,Ident 5])]))

(run (set! pexp (cons (lambda (s c) ((eval c) (list) (eval s))) pexp)))

(run (set! pexp (cons
    (apply (lambda (var)
        (lambda (s c) (apply (lambda (m s c)
            (if (starts-with s m)
                (apply c
                    var
                    (list->str (drop
                        (length (str->list m))
                        (str->list s))))
                (list)))
            "parse-str" (eval s) (eval c)))
        (gen-var "parse-str")))
    pexp)))
